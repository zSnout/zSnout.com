import{d as r,r as f,o as g,f as x,_ as v}from"./index.4z0bzixf.js";const _=["autocomplete","max","min","step","value"],I=r({__name:"InlineRangeField",props:{modelValue:null,autocomplete:null,min:null,max:null,step:null},emits:["update:modelValue"],setup(e,{emit:s}){const m=e,a=f();function d(l){if(l.preventDefault(),l.touches.length!==1||!a.value)return;const{x:t,width:n}=a.value.getBoundingClientRect(),c=Math.min(1,Math.max(0,(l.touches[0].clientX-t)/n)),{max:p=100,min:i=0,step:o}=m;let u=c*(p-i)+i;o!=="any"&&o&&(u=~~(u/o)*o),s("update:modelValue",u)}return(l,t)=>(g(),x("input",{ref_key:"field",ref:a,class:"field",autocomplete:e.autocomplete??"off",max:e.max,min:e.min,step:e.step,value:e.modelValue,type:"range",onInput:t[0]||(t[0]=n=>l.$emit("update:modelValue",+n.target.value)),onPointerdown:t[1]||(t[1]=n=>n.target.setPointerCapture(n.pointerId)),onTouchmove:d},null,40,_))}});const y=v(I,[["__scopeId","data-v-7c55a7f4"]]);export{y as I};
