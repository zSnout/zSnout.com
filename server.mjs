import{ObjectId as yt}from"mongodb";import{randomUUID as vt}from"node:crypto";import{Server as St}from"node:http";import{Server as xt}from"socket.io";import bt from"ytdl-core";import{compare as ft,hash as dt}from"bcrypt";import{randomUUID as D}from"node:crypto";import{MongoClient as ot}from"mongodb";var C=process.env.ZSNOUT_DATABASE?new ot(process.env.ZSNOUT_DATABASE,{serverApi:"1"}).connect().then(t=>(t.on("error",async()=>{await t.close(),await t.connect()}),t)).catch(t=>(console.log(t),void 0)):Promise.resolve((console.log("no database available"),void 0)),ct=C.then(t=>t==null?void 0:t.db("zsnout")).catch(t=>(console.log(t),void 0)),_t=C.then(t=>!!t)??Promise.resolve(!1);async function u(t){var e;return(e=await ct)==null?void 0:e.collection(t)}process.on("beforeExit",()=>{C.then(t=>t==null?void 0:t.close())});u("accounts").then(t=>{!t||(t.updateMany({invites:{$exists:!1}},{$set:{invites:[]}}),t.updateMany({stories:{$exists:!1}},{$set:{stories:[]}}))}).catch(()=>{});import{createTransport as ut}from"nodemailer";var mt={host:process.env.ZSNOUT_MAIL_HOST,port:+(process.env.ZSNOUT_MAIL_PORT||587),secure:process.env.ZSNOUT_MAIL_PORT==="465",auth:{user:process.env.ZSNOUT_MAIL_USER,pass:process.env.ZSNOUT_MAIL_PASSWORD}},Ct=!!(process.env.ZSNOUT_MAIL_HOST&&process.env.ZSNOUT_MAIL_USER&&process.env.ZSNOUT_MAIL_PASSWORD),h=ut(mt);function L(t){return new Promise(e=>{h==null||h.sendMail({...t,from:process.env.ZSNOUT_MAIL_FROM},(n,s)=>{n?(console.log(n),e(void 0)):e(s)})})}process.on("beforeExit",()=>h==null?void 0:h.close());var v;(s=>{function t(a){return a.length>=5&&a.length<=20&&/^[A-Za-z_][A-Za-z0-9_]+$/.test(a)&&!/zsnout/i.test(a)}s.Username=t;function e(a){return a.length>=8&&/(?![\d_])\w/.test(a)&&/\d/.test(a)}s.Password=e;function n(a){return/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(a)}s.Email=n})(v||={});function j(t){return dt(t,10)}function B(t,e){return ft(t,e)}var l=u("accounts");async function Z(t,e){let n=await l;if(!n)return{status:y.NoServer};let s=await n.findOne({username:t});return s?await B(e,s.password)?{status:y.Success,account:s}:{status:y.BadPassword}:{status:y.NoUser}}var y=(a=>(a[a.BadPassword=0]="BadPassword",a[a.NoServer=1]="NoServer",a[a.NoUser=2]="NoUser",a[a.Success=3]="Success",a))(y||{});async function x(t){let e=await l;if(!e)return{status:S.NoServer};let n=await e.findOne({session:t});return n?{status:S.Success,account:n}:{status:S.Failure}}var S=(s=>(s[s.Failure=0]="Failure",s[s.NoServer=1]="NoServer",s[s.Success=2]="Success",s))(S||{});async function z(t,e,n){let s=await l;if(!s)return{status:f.NoServer};if(!v.Username(t))return{status:f.BadUsername};if(!v.Password(e))return{status:f.BadPassword};if(!v.Email(n))return{status:f.BadEmail};if(await s.findOne({username:t}))return{status:f.UsernameTaken};if(await s.findOne({email:n}))return{status:f.EmailTaken};let a={username:t,password:await j(e),email:n,creation:Date.now(),session:D(),verified:!1,verifyCode:D(),bookmarks:[],notes:[],chats:[],invites:[],willNotifyForBlog:!0};return(await s.insertOne(a)).acknowledged?await L({to:n,subject:"Verify your zSnout account",text:`Hey @${t}! Verify your new zSnout account by opening this link: https://zsnout.com/verify-account?code=${a.verifyCode}.`})?{status:f.Success,account:a}:(await s.deleteOne({session:a.session}),{status:f.BadEmail}):{status:f.Failure}}var f=(c=>(c[c.NoServer=0]="NoServer",c[c.Failure=1]="Failure",c[c.Success=2]="Success",c[c.BadUsername=3]="BadUsername",c[c.BadPassword=4]="BadPassword",c[c.BadEmail=5]="BadEmail",c[c.IncorrectPassword=6]="IncorrectPassword",c[c.UsernameTaken=7]="UsernameTaken",c[c.EmailTaken=8]="EmailTaken",c))(f||{});async function E(t){let e=await l;if(!e)return{status:T.NoServer};let n=await e.findOneAndUpdate({verifyCode:t},{$set:{verified:!0}});return n.value?{status:T.Success,account:n.value}:{status:T.NoAccount}}var T=(s=>(s[s.NoAccount=0]="NoAccount",s[s.NoServer=1]="NoServer",s[s.Success=2]="Success",s))(T||{});async function lt(){let t=await l;await(t==null?void 0:t.deleteMany({verified:!1,creation:{$lte:Date.now()-15*60*1e3}}))}async function d(t){var e;return await((e=await l)==null?void 0:e.findOne({session:t}))||void 0}async function P(t,e){var n,s;return((s=await((n=await l)==null?void 0:n.updateOne({session:t},e)))==null?void 0:s.acknowledged)||!1}async function p(t,e){return P(t,{$set:e})}async function R(t,e){let n=await l;return n?v.Username(e)?await n.findOne({username:e})?7:await p(t,{username:e})?2:1:3:0}async function q(t,e,n){if(!await l)return 0;if(!v.Password(n))return 4;let a=await d(t);return a?await B(e,a.password)?await p(t,{password:await j(n)})?2:1:6:1}setInterval(lt,5*60*1e3);import{ObjectId as m}from"mongodb";import{randomUUID as Y}from"node:crypto";var U=u("accounts"),w=u("chats");async function M(t){let[e,n]=await Promise.all([w,d(t)]);if(!e||!n)return[];let s=n._id.toHexString();return(await e.find({_id:{$in:n.chats}}).toArray()).map(i=>({id:i._id.toHexString(),level:i.members[s],title:i.title})).filter(i=>i.level&&i.level!=="none")}async function I(t,e){let[n,s]=await Promise.all([w,d(t)]);if(!n||!s)return!1;let a=new m;if(!await p(t,{chats:s.chats.concat(a)}))return!1;let{acknowledged:i}=await n.insertOne({_id:a,creation:Date.now(),members:{[s._id.toHexString()]:"manage"},messages:[{content:`Welcome to your new chat, ${s.username}!`,from:"zSnout",id:Y(),timestamp:Date.now()}],title:e.slice(0,100),defaultLevel:"none"});return i}async function b(t,e){if(e.length!==24)return{permission:"none"};let[n,s]=await Promise.all([w,d(t)]);if(!n||!s)return{permission:"none"};let a=s._id.toHexString(),i=await n.findOne({_id:m.createFromHexString(e)});if(!i)return{permission:"none"};let o=i.members[a]||i.defaultLevel;return!o||o==="none"?{permission:"none"}:{permission:o,messages:i.messages,title:i.title,members:i.members}}async function W(t,e){if(t.length!==24)return!1;let n=await w;if(!n)return!1;let{acknowledged:s}=await n.updateOne({_id:m.createFromHexString(t)},{$set:{title:e.slice(0,100)}});return s}async function G(t,e,n){if(t.length!==24)return!1;let s=await w;if(!s)return!1;let a={content:n.slice(0,1e3),id:Y(),timestamp:Date.now(),from:e},{acknowledged:i}=await s.updateOne({_id:m.createFromHexString(t)},{$push:{messages:a}});return i?a:!1}async function J(t,e,n){if(e.length!==24)return!1;let s=await w;if(!s)return!1;let{acknowledged:a}=await s.updateOne({_id:m.createFromHexString(e)},{$pull:{messages:{id:n,from:t}}});return a}async function k(t){var s;let e=(s=await U)==null?void 0:s.find({_id:{$in:Object.keys(t).filter(a=>a.length===24).map(a=>m.createFromHexString(a))}});if(!e)return Object.create(null);let n=await e.toArray();return Object.fromEntries(n.map(({_id:a,username:i})=>[i,t[a.toHexString()]]).filter(a=>a[1]))}async function K(t){var s;let e=(s=await U)==null?void 0:s.find({username:{$in:Object.keys(t)}});if(!e)return{};let n=await e.toArray();return Object.fromEntries(n.map(({_id:a,username:i})=>[a.toHexString(),t[i]]).filter(a=>a[1]))}async function Q(t,e){if(t.length!==24)return!1;for(let o in e)if(o.length!==24)return!1;let[n,s]=await Promise.all([U,w]);if(!n||!s)return!1;let a=m.createFromHexString(t),i;return{acknowledged:i}=await n.updateMany({},{$pull:{chats:a}}),!i||({acknowledged:i}=await n.updateMany({_id:{$in:Object.keys(e).filter(o=>o.length===24).filter(o=>e[o]!=="none").map(o=>m.createFromHexString(o))}},{$push:{chats:a}}),!i)?!1:({acknowledged:i}=await s.updateOne({_id:a},{$set:{members:e}}),i)}async function X(t,e){if(t.length!==24||e.length!==24)return;let n=await w;if(!n)return;let{members:s}=await n.findOne({_id:m.createFromHexString(t)})||{};!s||(delete s[e],await n.updateOne({_id:m.createFromHexString(t)},{$set:{members:s}}))}async function V(t,e,n,s){if(e.length!==24)return;let a=await w;if(!a)return;let{messages:i}=await a.findOne({_id:m.createFromHexString(e)})||{};if(!i)return;let o=i.find(({id:O})=>O===n);if(!o||o.from!==t)return;o.content=s;let{acknowledged:g}=await a.updateOne({_id:m.createFromHexString(e)},{$set:{messages:i}});if(!!g)return o}import{ObjectId as $}from"bson";var wt=u("accounts"),_=u("notes");async function gt(t,e){let n=await wt;!n||await n.updateOne({_id:e},{$push:{notes:t}})}async function A(t){let{status:e,account:n}=await x(t);if(e===0)return[];if(e===1)return[];let s=await _;return s?(await s.find({_id:{$in:n.notes}}).toArray()).map(({_id:i,title:o,contents:g})=>({id:i.toHexString(),title:o,desc:g.slice(0,80).replaceAll(`
`," ")})):[]}async function tt(t,e){let{status:n,account:s}=await x(t);if(n===0||n===1)return;let a=await _;if(!a||s.notes.length>=100)return;let i={_id:new $,contents:"<p>This is your new note!</p>",creation:Date.now(),owner:s._id,title:e};await Promise.all([a.insertOne(i),gt(i._id,s._id)])}async function N(t,e){if(e.length!==24)return{doesOwn:!1};let{status:n,account:s}=await x(t);if(n===0)return{doesOwn:!1};if(n===1)return{doesOwn:!1};let a=await _;if(!a)return{doesOwn:!1};let i=await a.findOne({_id:$.createFromHexString(e),owner:s._id});return i?{doesOwn:!0,note:i}:{doesOwn:!1}}async function et(t,e){if(t.length!==24||e.length>1e4)return;let n=await _;!n||await n.updateOne({_id:$.createFromHexString(t)},{$set:{contents:e}})}async function nt(t,e){if(t.length!==24)return;let n=await _;!n||await n.updateOne({_id:$.createFromHexString(t)},{$set:{title:e.slice(0,100)}})}import{ObjectId as pt}from"mongodb";var ht=u("accounts"),st=u("stories");async function F(t){let[e,n]=await Promise.all([st,d(t)]);if(!e||!n)return[];let s=n._id.toHexString();return(await e.find({_id:{$in:n.stories}}).toArray()).map(i=>({id:i._id.toHexString(),title:i.title,activeThreadCount:i.threads.length,completedThreadCount:i.completed.length,level:i.members[s]})).filter(i=>i.level&&i.level!=="none")}async function at(t,e){let[n,s,a]=await Promise.all([st,ht,d(t)]);if(!n||!s||!a)return!1;let i=a._id.toHexString();if((await n.find({members:{[i]:"manage"}}).toArray()).length>=100)return!1;let g=new pt,{acknowledged:O}=await n.insertOne({completed:[],creation:Date.now(),members:{[i]:"manage"},threads:[],title:e,_id:g});return!(!O||!await P(t,{$push:{stories:g}}))}async function r(t,e){let{status:n,account:s}=await x(e);if(n===2){let a=s.creation+9e5;return(s.verified||!s.verified&&a>Date.now())&&(t.emit("account:update:session",s.session),t.emit("account:update:username",s.username)),s.verified?t.emit("account:needs-verification",!1):t.emit("account:needs-verification",a-Date.now()),t.data.oldSession&&t.leave(`session:${t.data.oldSession}`),t.join(`session:${t.data.oldSession=e}`),s}else return t.emit("account:update:session",""),t.emit("account:update:username",""),t.emit("account:needs-verification",!1),t.data.oldSession&&t.leave(`session:${t.data.oldSession}`),!1}var it="Your username should only contain letters, numbers, and underscores, and should be 6 to 20 characters long.",rt="Your password should contain a letter and number and be at least 8 characters long.",H={"account:check-session"(t){r(this,t)},async"account:create"(t,e,n){let{status:s,account:a}=await z(t,e,n);s===2?(await r(this,a.session),this.emit("account:done:verify")):this.emit("error",{[5]:"Your email address is invalid. Make sure it is formatted properly and can receive emails.",[4]:rt,[3]:it,[8]:`${n} is already registered with another account.`,[1]:"An unknown issue occurred. Try again later.",[0]:"This instance of zSnout can't log in users.",[7]:`@${t} is already registered with another account.`}[s])},async"account:login"(t,e){let{status:n,account:s}=await Z(t,e);n===3?(await r(this,s.session),this.emit("account:done:verify")):this.emit("error",{[0]:"Your username or password is incorrect.",[1]:"This instance of zSnout can't log in users.",[2]:"Your username or password is incorrect."}[n])},async"account:reset-session"(t,e){let n=vt();await p(t,{session:n});let s=this.to(`session:${t}`);s.emit("account:update:session",""),s.emit("account:update:username",""),e&&this.emit("account:update:session",this.data.oldSession=n),this.emit("account:done:reset-session")},async"account:update:username"(t,e){if(await r(this,t)){let n=await R(t,e);n===2?(this.to(`session:${t}`).emit("account:update:username",e),this.emit("account:update:username",e),this.emit("account:done:update:username")):this.emit("error",{[3]:it,[7]:`@${e} is already registered with another account.`,[0]:"This server cannot change usernames.",[1]:"An unknown error occurred."}[n])}},async"account:update:password"(t,e,n){if(await r(this,t)){let s=await q(t,e,n);s===2?this.emit("account:done:update:password"):this.emit("error",{[4]:rt,[6]:"Your old password was incorrect.",[0]:"This server cannot change usernames.",[1]:"An unknown error occurred."}[s])}},async"account:verify"(t){let{status:e,account:n}=await E(t);e===2?(await r(this,n.session),this.emit("account:done:verify")):this.emit("error",{[0]:"The provided verification code is invalid.",[1]:"This instance of zSnout can't verify accounts."}[e])},async"blog:request:will-notify"(t){var e;await r(this,t)&&this.emit("blog:update:will-notify",((e=await d(t))==null?void 0:e.willNotifyForBlog)||!1)},async"blog:update:will-notify"(t,e){await r(this,t)&&(await p(t,{willNotifyForBlog:e}),this.emit("blog:update:will-notify",e),this.to(`session-${t}`).emit("blog:update:will-notify",e),this.emit("blog:done:update:will-notify"))},async"bookmarks:request"(t){var e;if(await r(this,t)){let n=(e=await d(t))==null?void 0:e.bookmarks;n&&this.emit("bookmarks:list",n)}},async"bookmarks:update"(t,e){await r(this,t)&&await p(t,{bookmarks:e})&&e&&this.to(`session:${t}`).emit("bookmarks:list",e)},async"chat:create"(t,e){await r(this,t)&&await I(t,e)&&this.emit("chat:index",await M(t))},async"chat:leave"(t,e){if(e.length!==24)return;let n=await r(this,t);!n||!await P(t,{$pull:{chats:yt.createFromHexString(e)}})||await X(e,n._id.toHexString())},async"chat:message:delete"(t,e,n){if(e.length!==24)return;let s=await r(this,t);!s||await J(s.username,e,n)&&(this.to(`chat-${e}`).emit("chat:message:delete",e,n),this.emit("chat:message:delete",e,n))},async"chat:message:send"(t,e,n){if(!n)return;let s=await r(this,t);if(!s)return;let{permission:a}=await b(t,e);if(a==="manage"||a==="comment"){let i=await G(e,s.username,n);if(!i)return;this.to(`chat-${e}`).emit("chat:message:update",e,i),this.emit("chat:message:update",e,i)}},async"chat:message:update"(t,e,n,s){if(e.length!==24)return;let a=await r(this,t);if(!a)return;let i=await V(a.username,e,n,s);i&&this.to(`chat-${e}`).emit("chat:message:update",e,i)},async"chat:request:index"(t){await r(this,t)&&this.emit("chat:index",await M(t))},async"chat:request:members"(t,e){if(await r(this,t)){let{members:n,permission:s}=await b(t,e);if(this.emit("chat:permission",e,s),s!=="manage")return;this.emit("chat:update:members",e,await k(n))}},async"chat:update:members"(t,e,n){let s=await r(this,t);if(!s)return;let{permission:a}=await b(t,e);if(this.emit("chat:permission",e,a),a!=="manage"||n[s.username]!=="manage")return;let i=await K(n);i[s._id.toHexString()]==="manage"&&(this.emit("chat:update:members",e,await k(i)),await Q(e,i))},async"chat:update:title"(t,e,n){if(this.rooms.has(`chat-${e}`)||await r(this,t)){let{permission:s}=await b(t,e);s==="manage"&&await W(e,n)&&this.to(`chat-${e}`).emit("chat:update:title",e,n)}},async"chat:watch:start"(t,e){if(await r(this,t)){let{title:n,messages:s,permission:a}=await b(t,e);if(this.emit("chat:permission",e,a),a==="none")return;this.join(`chat-${e}`),this.emit("chat:message:list",e,s),this.emit("chat:update:title",e,n)}},async"chat:watch:stop"(t){this.leave(`chat-${t}`)},async"notes:create"(t,e){await r(this,t)?(await tt(t,e),this.emit("notes:index",await A(t))):this.emit("notes:index",[])},async"notes:request:details"(t,e){if(await r(this,t)){let{doesOwn:n,note:s}=await N(t,e);n&&this.emit("notes:details",{id:e,title:s.title})}},async"notes:request:index"(t){await r(this,t)?this.emit("notes:index",await A(t)):this.emit("notes:index",[])},async"notes:request:note"(t,e){if(await r(this,t)){let{doesOwn:n,note:s}=await N(t,e);n?this.emit("notes:note",e,s.contents):this.emit("notes:note",e,!1)}},async"notes:update:note"(t,e,n){if(await r(this,t)){let{doesOwn:s}=await N(t,e);s&&(et(e,n),this.to(`session:${t}`).emit("notes:note",e,n))}},async"notes:update:title"(t,e,n){if(await r(this,t)){let{doesOwn:s}=await N(t,e);s&&(await nt(e,n),this.to(`session:${t}`).emit("notes:details",{id:e,title:n}))}},async"story:create"(t,e){await r(this,t)&&await at(t,e)&&this.emit("story:index",await F(t))},async"story:request:index"(t){await r(this,t)&&this.emit("story:index",await F(t))},async"youtube:request"(t){try{let e=await bt.getInfo(`https://youtube.com/watch?v=${t}`),n=e.videoDetails,s=e.formats;n.thumbnails.sort((i,o)=>o.height-i.height);let{url:a}=n.thumbnails.sort((i,o)=>o.width-i.width)[0];this.emit("youtube:results",t,{title:n.title,description:n.description,isLive:n.isLiveContent,channel:n.ownerChannelName,thumbnail:a,formats:s.map(({url:i,hasAudio:o,hasVideo:g,qualityLabel:O,audioQuality:c})=>({url:i,hasAudio:o,hasVideo:g,quality:O,audio:c}))})}catch{}}};Object.setPrototypeOf(H,null);function Ot(t){new xt(t).on("connection",n=>{for(let s in H)n.on(s,H[s].bind(n))})}function oe(){let t=new St;Ot(t);let e=+(process.env.PORT||3e3);t.listen(Number.isSafeInteger(e)?e:3e3)}export{Ot as makeIO,oe as start};
