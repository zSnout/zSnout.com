import{Server as q}from"node:http";import{Server as W}from"socket.io";import{compare as C,hash as j}from"bcrypt";import{randomUUID as b}from"crypto";import{MongoClient as D}from"mongodb";var y=process.env.ZSNOUT_DATABASE?new D(process.env.ZSNOUT_DATABASE,{serverApi:"1"}).connect().then(e=>(e.on("error",async()=>{await e.close(),await e.connect()}),e)).catch(e=>(console.log(e),void 0)):Promise.resolve((console.log("no database available"),void 0)),B=y.then(e=>e==null?void 0:e.db("zsnout")).catch(e=>(console.log(e),void 0)),Q=y.then(e=>!!e)??Promise.resolve(!1);async function w(e){var t;return(t=await B)==null?void 0:t.collection(e)}process.on("beforeExit",()=>{y.then(e=>e==null?void 0:e.close())});import{createTransport as E}from"nodemailer";var F={host:process.env.ZSNOUT_MAIL_HOST,port:+(process.env.ZSNOUT_MAIL_PORT||587),secure:process.env.ZSNOUT_MAIL_PORT==="465",auth:{user:process.env.ZSNOUT_MAIL_USER,pass:process.env.ZSNOUT_MAIL_PASSWORD}},ee=!!(process.env.ZSNOUT_MAIL_HOST&&process.env.ZSNOUT_MAIL_USER&&process.env.ZSNOUT_MAIL_PASSWORD),u=E(F);u.sendMail({to:"zsakowitz@gmail.com"});function x(e){return new Promise(t=>{u==null||u.sendMail({...e,from:process.env.ZSNOUT_MAIL_FROM},(n,s)=>{n?(console.log(n),t(void 0)):(console.log(s),t(s))})})}process.on("beforeExit",()=>u==null?void 0:u.close());var O;(s=>{function e(o){return o.length>=5&&o.length<=20&&/^[A-Za-z_][A-Za-z0-9_]+$/.test(o)&&!/zsnout/i.test(o)}s.Username=e;function t(o){return o.length>=8&&/(?![\d_])\w/.test(o)&&/\d/.test(o)&&/[^\s\w]/.test(o)}s.Password=t;function n(o){return/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(o)}s.Email=n})(O||={});function H(e){return j(e,10)}function L(e,t){return C(e,t)}var d=w("accounts");async function _(e,t){let n=await d;if(!n)return{status:f.NoServer};let s=await n.findOne({username:e});return s?await L(t,s.password)?{status:f.Success,account:s}:{status:f.BadPassword}:{status:f.NoUser}}var f=(o=>(o[o.BadPassword=0]="BadPassword",o[o.NoServer=1]="NoServer",o[o.NoUser=2]="NoUser",o[o.Success=3]="Success",o))(f||{});async function m(e){let t=await d;if(!t)return{status:l.NoServer};let n=await t.findOne({session:e});return n?{status:l.Success,account:n}:{status:l.Failure}}var l=(s=>(s[s.Failure=0]="Failure",s[s.NoServer=1]="NoServer",s[s.Success=2]="Success",s))(l||{});async function P(e,t,n){let s=await d;if(!s)return{status:i.NoServer};if(!O.Username(e))return{status:i.BadUsername};if(!O.Password(t))return{status:i.BadPassword};if(!O.Email(n))return{status:i.BadEmail};if(await k(),await s.findOne({username:e}))return{status:i.UsernameTaken};if(await s.findOne({email:n}))return{status:i.EmailTaken};let o={username:e,password:await H(t),email:n,creation:Date.now(),session:b(),verified:!1,verifyCode:b(),bookmarks:[],notes:[],chats:[]};return(await s.insertOne(o)).acknowledged?await x({to:n,subject:"Verify your zSnout account",text:`Hey @${e}! Verify your new zSnout account by opening this link: https://zsnout.com/account/verify?code=${o.verifyCode}.`})?{status:i.Success,account:o}:(await s.deleteOne({session:o.session}),{status:i.BadEmail}):{status:i.Failure}}var i=(a=>(a[a.BadUsername=0]="BadUsername",a[a.BadPassword=1]="BadPassword",a[a.BadEmail=2]="BadEmail",a[a.EmailTaken=3]="EmailTaken",a[a.Failure=4]="Failure",a[a.NoServer=5]="NoServer",a[a.Success=6]="Success",a[a.UsernameTaken=7]="UsernameTaken",a))(i||{});async function U(e){let t=await d;if(!t)return{status:p.NoServer};let n=await t.findOneAndUpdate({verifyCode:e},{$set:{verified:!0}});return n.value?{status:p.Success,account:n.value}:{status:p.NoAccount}}var p=(s=>(s[s.NoAccount=0]="NoAccount",s[s.NoServer=1]="NoServer",s[s.Success=2]="Success",s))(p||{});async function k(){let e=await d;await(e==null?void 0:e.deleteMany({verified:!1,creation:{$lte:Date.now()-15*60*1e3}}))}async function M(e){var t;return await((t=await d)==null?void 0:t.findOne({session:e}))||void 0}async function $(e,t){var n,s;return(s=await((n=await d)==null?void 0:n.updateOne({session:e},{$set:t})))==null?void 0:s.acknowledged}setInterval(k,5*60*1e3);import{ObjectId as h}from"bson/lib/bson.js";var R=w("accounts"),v=w("notes");async function Y(e,t){let n=await R;!n||await n.updateOne({_id:t},{$push:{notes:e}})}async function S(e){let{status:t,account:n}=await m(e);if(t===0)return[];if(t===1)return[];let s=await v;return s?(await s.find({_id:{$in:n.notes}}).toArray()).map(({_id:c,title:N,contents:A})=>({id:c.toHexString(),title:N,desc:A.slice(0,80).replaceAll(`
`," ")})):[]}async function I(e,t){let{status:n,account:s}=await m(e);if(n===0||n===1)return;let o=await v;if(!o||s.notes.length>=100)return;let c={_id:new h,contents:"<p>This is your new note!</p>",creation:Date.now(),owner:s._id,title:t};await Promise.all([o.insertOne(c),Y(c._id,s._id)])}async function g(e,t){let{status:n,account:s}=await m(e);if(n===0)return{doesOwn:!1};if(n===1)return{doesOwn:!1};let o=await v;if(!o)return{doesOwn:!1};let c=await o.findOne({_id:h.createFromHexString(t),owner:s._id});return c?{doesOwn:!0,note:c}:{doesOwn:!1}}async function Z(e,t){if(t.length>=1e4)return;let n=await v;!n||await n.updateOne({_id:h.createFromHexString(e)},{$set:{contents:t}})}async function z(e,t){if(t.length>=100)return;let n=await v;!n||await n.updateOne({_id:h.createFromHexString(e)},{$set:{title:t}})}async function r(e,t){let{status:n,account:s}=await m(t);if(n===2){let o=s.creation+9e5;return(s.verified||!s.verified&&o>Date.now())&&(e.emit("account:update:session",s.session),e.emit("account:update:username",s.username)),s.verified?e.emit("account:needs-verification",!1):e.emit("account:needs-verification",o-Date.now()),e.data.oldSession&&e.leave(`session:${e.data.oldSession}`),e.join(`session:${e.data.oldSession=t}`),!0}else return e.emit("account:update:session",""),e.emit("account:update:username",""),e.emit("account:needs-verification",!1),e.data.oldSession&&e.leave(`session:${e.data.oldSession}`),!1}var T={"account:check-session"(e){r(this,e)},async"account:create"(e,t,n){let{status:s,account:o}=await P(e,t,n);s===6?(await r(this,o.session),this.emit("account:complete-login")):this.emit("error",{[2]:"Your email address is invalid. Make sure it is formatted properly and can recieve emails.",[1]:"Your password should have a letter, number, symbol, and be at least 8 characters long.",[0]:"Your username should only contain letters, numbers, and underscores, and should be at least 6 characters long.",[3]:`${n} is already registered with another account.`,[4]:"An unknown issue occurred. Try again later.",[5]:"This instance of zSnout can't log in users.",[7]:`@${e} is already registered with another account.`}[s])},async"account:login"(e,t){let{status:n,account:s}=await _(e,t);n===3?(await r(this,s.session),this.emit("account:complete-login")):this.emit("error",{[0]:"Your username or password is incorrect.",[1]:"This instance of zSnout can't log in users.",[2]:"Your username or password is incorrect."}[n])},async"account:verify"(e){let{status:t,account:n}=await U(e);t===2?(await r(this,n.session),this.emit("account:complete-login")):this.emit("error",{[0]:"The provided verification code is invalid.",[1]:"This instance of zSnout can't verify accounts."}[t])},async"bookmarks:request"(e){var t;if(await r(this,e)){let n=(t=await M(e))==null?void 0:t.bookmarks;n&&this.emit("bookmarks:list",n)}},async"bookmarks:update"(e,t){await r(this,e)&&await $(e,{bookmarks:t})&&t&&this.to(`session:${e}`).emit("bookmarks:list",t)},async"notes:create"(e,t){await r(this,e)?(await I(e,t),this.emit("notes:index",await S(e))):this.emit("notes:index",[])},async"notes:request:details"(e,t){if(await r(this,e)){let{doesOwn:n,note:s}=await g(e,t);n&&this.emit("notes:details",{id:t,title:s.title})}},async"notes:request:index"(e){await r(this,e)?this.emit("notes:index",await S(e)):this.emit("notes:index",[])},async"notes:request:note"(e,t){if(await r(this,e)){let{doesOwn:n,note:s}=await g(e,t);n?this.emit("notes:note",t,s.contents):this.emit("notes:note",t,!1)}},async"notes:update:note"(e,t,n){if(await r(this,e)){let{doesOwn:s}=await g(e,t);s&&(Z(t,n),this.to(`session:${e}`).emit("notes:note",t,n))}},async"notes:update:title"(e,t,n){if(await r(this,e)){let{doesOwn:s}=await g(e,t);s&&(await z(t,n),this.to(`session:${e}`).emit("notes:details",{id:t,title:n}))}}};Object.setPrototypeOf(T,null);function G(e){new W(e).on("connection",n=>{for(let s in T)n.on(s,T[s].bind(n))})}function Oe(){let e=new q;G(e);let t=+(process.env.PORT||3e3);e.listen(Number.isSafeInteger(t)?t:3e3)}export{G as makeIO,Oe as start};
