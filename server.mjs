import{ObjectId as le}from"mongodb";import{randomUUID as we}from"node:crypto";import{Server as ge}from"node:http";import{Server as pe}from"socket.io";import{compare as ce,hash as ue}from"bcrypt";import{randomUUID as H}from"node:crypto";import{MongoClient as ae}from"mongodb";var N=process.env.ZSNOUT_DATABASE?new ae(process.env.ZSNOUT_DATABASE,{serverApi:"1"}).connect().then(e=>(e.on("error",async()=>{await e.close(),await e.connect()}),e)).catch(e=>(console.log(e),void 0)):Promise.resolve((console.log("no database available"),void 0)),ie=N.then(e=>e==null?void 0:e.db("zsnout")).catch(e=>(console.log(e),void 0)),Se=N.then(e=>!!e)??Promise.resolve(!1);async function l(e){var t;return(t=await ie)==null?void 0:t.collection(e)}process.on("beforeExit",()=>{N.then(e=>e==null?void 0:e.close())});import{createTransport as re}from"nodemailer";var oe={host:process.env.ZSNOUT_MAIL_HOST,port:+(process.env.ZSNOUT_MAIL_PORT||587),secure:process.env.ZSNOUT_MAIL_PORT==="465",auth:{user:process.env.ZSNOUT_MAIL_USER,pass:process.env.ZSNOUT_MAIL_PASSWORD}},be=!!(process.env.ZSNOUT_MAIL_HOST&&process.env.ZSNOUT_MAIL_USER&&process.env.ZSNOUT_MAIL_PASSWORD),p=re(oe);function F(e){return new Promise(t=>{p==null||p.sendMail({...e,from:process.env.ZSNOUT_MAIL_FROM},(n,s)=>{n?(console.log(n),t(void 0)):t(s)})})}process.on("beforeExit",()=>p==null?void 0:p.close());var y;(s=>{function e(a){return a.length>=5&&a.length<=20&&/^[A-Za-z_][A-Za-z0-9_]+$/.test(a)&&!/zsnout/i.test(a)}s.Username=e;function t(a){return a.length>=8&&/(?![\d_])\w/.test(a)&&/\d/.test(a)}s.Password=t;function n(a){return/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(a)}s.Email=n})(y||={});function D(e){return ue(e,10)}function L(e,t){return ce(e,t)}var m=l("accounts");async function B(e,t){let n=await m;if(!n)return{status:h.NoServer};let s=await n.findOne({username:e});return s?await L(t,s.password)?{status:h.Success,account:s}:{status:h.BadPassword}:{status:h.NoUser}}var h=(a=>(a[a.BadPassword=0]="BadPassword",a[a.NoServer=1]="NoServer",a[a.NoUser=2]="NoUser",a[a.Success=3]="Success",a))(h||{});async function S(e){let t=await m;if(!t)return{status:v.NoServer};let n=await t.findOne({session:e});return n?{status:v.Success,account:n}:{status:v.Failure}}var v=(s=>(s[s.Failure=0]="Failure",s[s.NoServer=1]="NoServer",s[s.Success=2]="Success",s))(v||{});async function j(e,t,n){let s=await m;if(!s)return{status:f.NoServer};if(!y.Username(e))return{status:f.BadUsername};if(!y.Password(t))return{status:f.BadPassword};if(!y.Email(n))return{status:f.BadEmail};if(await s.findOne({username:e}))return{status:f.UsernameTaken};if(await s.findOne({email:n}))return{status:f.EmailTaken};let a={username:e,password:await D(t),email:n,creation:Date.now(),session:H(),verified:!1,verifyCode:H(),bookmarks:[],notes:[],chats:[],invites:[],willNotifyForBlog:!0};return(await s.insertOne(a)).acknowledged?await F({to:n,subject:"Verify your zSnout account",text:`Hey @${e}! Verify your new zSnout account by opening this link: https://zsnout.com/verify-account?code=${a.verifyCode}.`})?{status:f.Success,account:a}:(await s.deleteOne({session:a.session}),{status:f.BadEmail}):{status:f.Failure}}var f=(c=>(c[c.NoServer=0]="NoServer",c[c.Failure=1]="Failure",c[c.Success=2]="Success",c[c.BadUsername=3]="BadUsername",c[c.BadPassword=4]="BadPassword",c[c.BadEmail=5]="BadEmail",c[c.IncorrectPassword=6]="IncorrectPassword",c[c.UsernameTaken=7]="UsernameTaken",c[c.EmailTaken=8]="EmailTaken",c))(f||{});async function Z(e){let t=await m;if(!t)return{status:x.NoServer};let n=await t.findOneAndUpdate({verifyCode:e},{$set:{verified:!0}});return n.value?{status:x.Success,account:n.value}:{status:x.NoAccount}}var x=(s=>(s[s.NoAccount=0]="NoAccount",s[s.NoServer=1]="NoServer",s[s.Success=2]="Success",s))(x||{});async function fe(){let e=await m;await(e==null?void 0:e.deleteMany({verified:!1,creation:{$lte:Date.now()-15*60*1e3}}))}async function w(e){var t;return await((t=await m)==null?void 0:t.findOne({session:e}))||void 0}async function U(e,t){var n,s;return((s=await((n=await m)==null?void 0:n.updateOne({session:e},t)))==null?void 0:s.acknowledged)||!1}async function g(e,t){return U(e,{$set:t})}async function z(e,t){let n=await m;return n?y.Username(t)?await n.findOne({username:t})?7:await g(e,{username:t})?2:1:3:0}async function E(e,t,n){if(!await m)return 0;if(!y.Password(n))return 4;let a=await w(e);return a?await L(t,a.password)?await g(e,{password:await D(n)})?2:1:6:1}setInterval(fe,5*60*1e3);import{ObjectId as u}from"mongodb";import{randomUUID as R}from"node:crypto";var $=l("accounts"),d=l("chats");async function C(e){let[t,n]=await Promise.all([d,w(e)]);if(!t||!n)return[];let s=n._id.toHexString();return(await t.find({_id:{$in:n.chats}}).toArray()).map(i=>({id:i._id.toHexString(),level:i.members[s],title:i.title})).filter(i=>i.level&&i.level!=="none")}async function q(e,t){let[n,s]=await Promise.all([d,w(e)]);if(!n||!s)return!1;let a=new u;if(!await g(e,{chats:s.chats.concat(a)}))return!1;let{acknowledged:i}=await n.insertOne({_id:a,creation:Date.now(),members:{[s._id.toHexString()]:"manage"},messages:[{content:`Welcome to your new chat, ${s.username}!`,from:"zSnout",id:R(),timestamp:Date.now()}],title:t.slice(0,100),defaultLevel:"none"});return i}async function O(e,t){if(t.length!==24)return{permission:"none"};let[n,s]=await Promise.all([d,w(e)]);if(!n||!s)return{permission:"none"};let a=s._id.toHexString(),i=await n.findOne({_id:u.createFromHexString(t)});if(!i)return{permission:"none"};let o=i.members[a]||i.defaultLevel;return!o||o==="none"?{permission:"none"}:{permission:o,messages:i.messages,title:i.title,members:i.members}}async function Y(e,t){if(e.length!==24)return!1;let n=await d;if(!n)return!1;let{acknowledged:s}=await n.updateOne({_id:u.createFromHexString(e)},{$set:{title:t.slice(0,100)}});return s}async function W(e,t,n){if(e.length!==24)return!1;let s=await d;if(!s)return!1;let a={content:n.slice(0,1e3),id:R(),timestamp:Date.now(),from:t},{acknowledged:i}=await s.updateOne({_id:u.createFromHexString(e)},{$push:{messages:a}});return i?a:!1}async function G(e,t,n){if(t.length!==24)return!1;let s=await d;if(!s)return!1;let{acknowledged:a}=await s.updateOne({_id:u.createFromHexString(t)},{$pull:{messages:{id:n,from:e}}});return a}async function k(e){var s;let t=(s=await $)==null?void 0:s.find({_id:{$in:Object.keys(e).filter(a=>a.length===24).map(a=>u.createFromHexString(a))}});if(!t)return Object.create(null);let n=await t.toArray();return Object.fromEntries(n.map(({_id:a,username:i})=>[i,e[a.toHexString()]]).filter(a=>a[1]))}async function J(e){var s;let t=(s=await $)==null?void 0:s.find({username:{$in:Object.keys(e)}});if(!t)return{};let n=await t.toArray();return Object.fromEntries(n.map(({_id:a,username:i})=>[a.toHexString(),e[i]]).filter(a=>a[1]))}async function K(e,t){if(e.length!==24)return!1;for(let o in t)if(o.length!==24)return!1;let[n,s]=await Promise.all([$,d]);if(!n||!s)return!1;let a=u.createFromHexString(e),i;return{acknowledged:i}=await n.updateMany({},{$pull:{chats:a}}),!i||({acknowledged:i}=await n.updateMany({_id:{$in:Object.keys(t).filter(o=>o.length===24).filter(o=>t[o]!=="none").map(o=>u.createFromHexString(o))}},{$push:{chats:a}}),!i)?!1:({acknowledged:i}=await s.updateOne({_id:a},{$set:{members:t}}),i)}async function Q(e,t){if(e.length!==24||t.length!==24)return;let n=await d;if(!n)return;let{members:s}=await n.findOne({_id:u.createFromHexString(e)})||{};!s||(delete s[t],await n.updateOne({_id:u.createFromHexString(e)},{$set:{members:s}}))}async function X(e,t,n,s){if(t.length!==24)return;let a=await d;if(!a)return;let{messages:i}=await a.findOne({_id:u.createFromHexString(t)})||{};if(!i)return;let o=i.find(({id:se})=>se===n);if(!o||o.from!==e)return;o.content=s;let{acknowledged:_}=await a.updateOne({_id:u.createFromHexString(t)},{$set:{messages:i}});if(!!_)return o}import{ObjectId as P}from"bson";var me=l("accounts"),b=l("notes");async function de(e,t){let n=await me;!n||await n.updateOne({_id:t},{$push:{notes:e}})}async function M(e){let{status:t,account:n}=await S(e);if(t===0)return[];if(t===1)return[];let s=await b;return s?(await s.find({_id:{$in:n.notes}}).toArray()).map(({_id:i,title:o,contents:_})=>({id:i.toHexString(),title:o,desc:_.slice(0,80).replaceAll(`
`," ")})):[]}async function V(e,t){let{status:n,account:s}=await S(e);if(n===0||n===1)return;let a=await b;if(!a||s.notes.length>=100)return;let i={_id:new P,contents:"<p>This is your new note!</p>",creation:Date.now(),owner:s._id,title:t};await Promise.all([a.insertOne(i),de(i._id,s._id)])}async function T(e,t){if(t.length!==24)return{doesOwn:!1};let{status:n,account:s}=await S(e);if(n===0)return{doesOwn:!1};if(n===1)return{doesOwn:!1};let a=await b;if(!a)return{doesOwn:!1};let i=await a.findOne({_id:P.createFromHexString(t),owner:s._id});return i?{doesOwn:!0,note:i}:{doesOwn:!1}}async function I(e,t){if(e.length!==24||t.length>1e4)return;let n=await b;!n||await n.updateOne({_id:P.createFromHexString(e)},{$set:{contents:t}})}async function ee(e,t){if(e.length!==24)return;let n=await b;!n||await n.updateOne({_id:P.createFromHexString(e)},{$set:{title:t.slice(0,100)}})}async function r(e,t){let{status:n,account:s}=await S(t);if(n===2){let a=s.creation+9e5;return(s.verified||!s.verified&&a>Date.now())&&(e.emit("account:update:session",s.session),e.emit("account:update:username",s.username)),s.verified?e.emit("account:needs-verification",!1):e.emit("account:needs-verification",a-Date.now()),e.data.oldSession&&e.leave(`session:${e.data.oldSession}`),e.join(`session:${e.data.oldSession=t}`),s}else return e.emit("account:update:session",""),e.emit("account:update:username",""),e.emit("account:needs-verification",!1),e.data.oldSession&&e.leave(`session:${e.data.oldSession}`),!1}var te="Your username should only contain letters, numbers, and underscores, and should be 6 to 20 characters long.",ne="Your password should contain a letter and number and be at least 8 characters long.",A={"account:check-session"(e){r(this,e)},async"account:create"(e,t,n){let{status:s,account:a}=await j(e,t,n);s===2?(await r(this,a.session),this.emit("account:done:verify")):this.emit("error",{[5]:"Your email address is invalid. Make sure it is formatted properly and can recieve emails.",[4]:ne,[3]:te,[8]:`${n} is already registered with another account.`,[1]:"An unknown issue occurred. Try again later.",[0]:"This instance of zSnout can't log in users.",[7]:`@${e} is already registered with another account.`}[s])},async"account:login"(e,t){let{status:n,account:s}=await B(e,t);n===3?(await r(this,s.session),this.emit("account:done:verify")):this.emit("error",{[0]:"Your username or password is incorrect.",[1]:"This instance of zSnout can't log in users.",[2]:"Your username or password is incorrect."}[n])},async"account:reset-session"(e,t){let n=we();await g(e,{session:n});let s=this.to(`session:${e}`);s.emit("account:update:session",""),s.emit("account:update:username",""),t&&this.emit("account:update:session",this.data.oldSession=n),this.emit("account:done:reset-session")},async"account:update:username"(e,t){if(await r(this,e)){let n=await z(e,t);n===2?(this.to(`session:${e}`).emit("account:update:username",t),this.emit("account:update:username",t),this.emit("account:done:update:username")):this.emit("error",{[3]:te,[7]:`@${t} is already registered with another account.`,[0]:"This server cannot change usernames.",[1]:"An unknown error occurred."}[n])}},async"account:update:password"(e,t,n){if(await r(this,e)){let s=await E(e,t,n);s===2?this.emit("account:done:update:password"):this.emit("error",{[4]:ne,[6]:"Your old password was incorrect.",[0]:"This server cannot change usernames.",[1]:"An unknown error occurred."}[s])}},async"account:verify"(e){let{status:t,account:n}=await Z(e);t===2?(await r(this,n.session),this.emit("account:done:verify")):this.emit("error",{[0]:"The provided verification code is invalid.",[1]:"This instance of zSnout can't verify accounts."}[t])},async"blog:request:will-notify"(e){var t;await r(this,e)&&this.emit("blog:update:will-notify",((t=await w(e))==null?void 0:t.willNotifyForBlog)||!1)},async"blog:update:will-notify"(e,t){await r(this,e)&&(await g(e,{willNotifyForBlog:t}),this.emit("blog:update:will-notify",t),this.to(`session-${e}`).emit("blog:update:will-notify",t),this.emit("blog:done:update:will-notify"))},async"bookmarks:request"(e){var t;if(await r(this,e)){let n=(t=await w(e))==null?void 0:t.bookmarks;n&&this.emit("bookmarks:list",n)}},async"bookmarks:update"(e,t){await r(this,e)&&await g(e,{bookmarks:t})&&t&&this.to(`session:${e}`).emit("bookmarks:list",t)},async"chat:create"(e,t){await r(this,e)&&await q(e,t)&&this.emit("chat:index",await C(e))},async"chat:leave"(e,t){if(t.length!==24)return;let n=await r(this,e);!n||!await U(e,{$pull:{chats:le.createFromHexString(t)}})||await Q(t,n._id.toHexString())},async"chat:message:delete"(e,t,n){if(t.length!==24)return;let s=await r(this,e);!s||await G(s.username,t,n)&&(this.to(`chat-${t}`).emit("chat:message:delete",t,n),this.emit("chat:message:delete",t,n))},async"chat:message:send"(e,t,n){if(!n)return;let s=await r(this,e);if(!s)return;let{permission:a}=await O(e,t);if(a==="manage"||a==="comment"){let i=await W(t,s.username,n);if(!i)return;this.to(`chat-${t}`).emit("chat:message:update",t,i),this.emit("chat:message:update",t,i)}},async"chat:message:update"(e,t,n,s){if(t.length!==24)return;let a=await r(this,e);if(!a)return;let i=await X(a.username,t,n,s);i&&this.to(`chat-${t}`).emit("chat:message:update",t,i)},async"chat:request:index"(e){await r(this,e)&&this.emit("chat:index",await C(e))},async"chat:request:members"(e,t){if(await r(this,e)){let{members:n,permission:s}=await O(e,t);if(this.emit("chat:permission",t,s),s!=="manage")return;this.emit("chat:update:members",t,await k(n))}},async"chat:update:members"(e,t,n){let s=await r(this,e);if(!s)return;let{permission:a}=await O(e,t);if(this.emit("chat:permission",t,a),a!=="manage"||n[s.username]!=="manage")return;let i=await J(n);i[s._id.toHexString()]==="manage"&&(this.emit("chat:update:members",t,await k(i)),await K(t,i))},async"chat:update:title"(e,t,n){if(this.rooms.has(`chat-${t}`)||await r(this,e)){let{permission:s}=await O(e,t);s==="manage"&&await Y(t,n)&&this.to(`chat-${t}`).emit("chat:update:title",t,n)}},async"chat:watch:start"(e,t){if(await r(this,e)){let{title:n,messages:s,permission:a}=await O(e,t);if(this.emit("chat:permission",t,a),a==="none")return;this.join(`chat-${t}`),this.emit("chat:message:list",t,s),this.emit("chat:update:title",t,n)}},async"chat:watch:stop"(e){this.leave(`chat-${e}`)},async"notes:create"(e,t){await r(this,e)?(await V(e,t),this.emit("notes:index",await M(e))):this.emit("notes:index",[])},async"notes:request:details"(e,t){if(await r(this,e)){let{doesOwn:n,note:s}=await T(e,t);n&&this.emit("notes:details",{id:t,title:s.title})}},async"notes:request:index"(e){await r(this,e)?this.emit("notes:index",await M(e)):this.emit("notes:index",[])},async"notes:request:note"(e,t){if(await r(this,e)){let{doesOwn:n,note:s}=await T(e,t);n?this.emit("notes:note",t,s.contents):this.emit("notes:note",t,!1)}},async"notes:update:note"(e,t,n){if(await r(this,e)){let{doesOwn:s}=await T(e,t);s&&(I(t,n),this.to(`session:${e}`).emit("notes:note",t,n))}},async"notes:update:title"(e,t,n){if(await r(this,e)){let{doesOwn:s}=await T(e,t);s&&(await ee(t,n),this.to(`session:${e}`).emit("notes:details",{id:t,title:n}))}}};Object.setPrototypeOf(A,null);function he(e){new pe(e).on("connection",n=>{for(let s in A)n.on(s,A[s].bind(n))})}function Je(){let e=new ge;he(e);let t=+(process.env.PORT||3e3);e.listen(Number.isSafeInteger(t)?t:3e3)}export{he as makeIO,Je as start};
