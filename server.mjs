import{ObjectId as He}from"mongodb";import{randomUUID as Le}from"node:crypto";import{Server as Re}from"node:http";import{Server as Fe}from"socket.io";import je from"ytdl-core";import{compare as Ce,hash as Ae}from"bcrypt";import{randomUUID as W}from"node:crypto";import{MongoClient as Ue}from"mongodb";var L=process.env.ZSNOUT_DATABASE?new Ue(process.env.ZSNOUT_DATABASE,{serverApi:"1"}).connect().then(e=>(e.on("error",async()=>{await e.close(),await e.connect()}),e)).catch(e=>(console.log(e),void 0)):Promise.resolve((console.log("no database available"),void 0)),_e=L.then(e=>e==null?void 0:e.db("zsnout")).catch(e=>(console.log(e),void 0)),Ie=L.then(e=>!!e)??Promise.resolve(!1);async function y(e){var t;return(t=await _e)==null?void 0:t.collection(e)}process.on("beforeExit",()=>{L.then(e=>e==null?void 0:e.close())});y("accounts").then(e=>{e&&(e.updateMany({invites:{$exists:!1}},{$set:{invites:[]}}),e.updateMany({stories:{$exists:!1}},{$set:{stories:[]}}))}).catch(()=>{});import{createTransport as Pe}from"nodemailer";var $e={host:process.env.ZSNOUT_MAIL_HOST,port:+(process.env.ZSNOUT_MAIL_PORT||587),secure:process.env.ZSNOUT_MAIL_PORT==="465",auth:{user:process.env.ZSNOUT_MAIL_USER,pass:process.env.ZSNOUT_MAIL_PASSWORD}},Ye=!!(process.env.ZSNOUT_MAIL_HOST&&process.env.ZSNOUT_MAIL_USER&&process.env.ZSNOUT_MAIL_PASSWORD),U=Pe($e);function Y(e){return new Promise(t=>{U==null||U.sendMail({...e,from:process.env.ZSNOUT_MAIL_FROM},(n,s)=>{n?(console.log(n),t(void 0)):t(s)})})}process.on("beforeExit",()=>U==null?void 0:U.close());var _;(s=>{function e(r){return r.length>=5&&r.length<=20&&/^[A-Za-z_][A-Za-z0-9_]+$/.test(r)&&!/zsnout/i.test(r)}s.Username=e;function t(r){return r.length>=8&&/(?![\d_])\w/.test(r)&&/\d/.test(r)}s.Password=t;function n(r){return/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(r)}s.Email=n})(_||={});function G(e){return Ae(e,10)}function J(e,t){return Ce(e,t)}var b=y("accounts");async function K(e,t){let n=await b;if(!n)return{status:1};let s=await n.findOne({username:e});return s?await J(t,s.password)?{status:3,account:s}:{status:0}:{status:2}}async function P(e){let t=await b;if(!t)return{status:1};let n=await t.findOne({session:e});return n?{status:2,account:n}:{status:0}}async function Q(e,t,n){let s=await b;if(!s)return{status:0};if(!_.Username(e))return{status:3};if(!_.Password(t))return{status:4};if(!_.Email(n))return{status:5};if(await s.findOne({username:e}))return{status:7};if(await s.findOne({email:n}))return{status:8};let r={username:e,password:await G(t),email:n,creation:Date.now(),session:W(),verified:!1,verifyCode:W(),bookmarks:[],notes:[],chats:[],invites:[],stories:[],willNotifyForBlog:!0};return(await s.insertOne(r)).acknowledged?await Y({to:n,subject:"Verify your zSnout account",text:`Hey @${e}! Verify your new zSnout account by opening this link: https://zsnout.com/verify-account?code=${r.verifyCode}.`})?{status:2,account:r}:(await s.deleteOne({session:r.session}),{status:5}):{status:1}}async function V(e){let t=await b;if(!t)return{status:1};let n=await t.findOneAndUpdate({verifyCode:e},{$set:{verified:!0}});return n.value?{status:2,account:n.value}:{status:0}}async function Me(){let e=await b;await(e==null?void 0:e.deleteMany({verified:!1,creation:{$lte:Date.now()-15*60*1e3}}))}async function h(e){var t;return await((t=await b)==null?void 0:t.findOne({session:e}))||void 0}async function C(e,t){var n,s;return((s=await((n=await b)==null?void 0:n.updateOne({session:e},t)))==null?void 0:s.acknowledged)||!1}async function O(e,t){return C(e,{$set:t})}async function X(e,t){let n=await b;return n?_.Username(t)?await n.findOne({username:t})?7:await O(e,{username:t})?2:1:3:0}async function ee(e,t,n){if(!await b)return 0;if(!_.Password(n))return 4;let r=await h(e);return r?await J(t,r.password)?await O(e,{password:await G(n)})?2:1:6:1}setInterval(Me,5*60*1e3);import{ObjectId as S}from"mongodb";import{randomUUID as te}from"node:crypto";var R=y("accounts"),x=y("chats");async function F(e){let[t,n]=await Promise.all([x,h(e)]);if(!t||!n)return[];let s=n._id.toHexString();return(await t.find({_id:{$in:n.chats}}).toArray()).map(a=>({id:a._id.toHexString(),level:a.members[s],title:a.title})).filter(a=>a.level&&a.level!=="none")}async function ne(e,t){let[n,s]=await Promise.all([x,h(e)]);if(!n||!s)return!1;let r=new S;if(!await O(e,{chats:s.chats.concat(r)}))return!1;let{acknowledged:a}=await n.insertOne({_id:r,creation:Date.now(),members:{[s._id.toHexString()]:"manage"},messages:[{content:`Welcome to your new chat, ${s.username}!`,from:"zSnout",id:te(),timestamp:Date.now()}],title:t.slice(0,100),defaultLevel:"none"});return a}async function $(e,t){if(t.length!==24)return{permission:"none"};let[n,s]=await Promise.all([x,h(e)]);if(!n||!s)return{permission:"none"};let r=s._id.toHexString(),a=await n.findOne({_id:S.createFromHexString(t)});if(!a)return{permission:"none"};let i=a.members[r]||a.defaultLevel;return!i||i==="none"?{permission:"none"}:{permission:i,messages:a.messages,title:a.title,members:a.members}}async function se(e,t){if(e.length!==24)return!1;let n=await x;if(!n)return!1;let{acknowledged:s}=await n.updateOne({_id:S.createFromHexString(e)},{$set:{title:t.slice(0,100)}});return s}async function ae(e,t,n){if(e.length!==24)return!1;let s=await x;if(!s)return!1;let r={content:n.slice(0,1e3),id:te(),timestamp:Date.now(),from:t},{acknowledged:a}=await s.updateOne({_id:S.createFromHexString(e)},{$push:{messages:r}});return a?r:!1}async function re(e,t,n){if(t.length!==24)return!1;let s=await x;if(!s)return!1;let{acknowledged:r}=await s.updateOne({_id:S.createFromHexString(t)},{$pull:{messages:{id:n,from:e}}});return r}async function j(e){var s;let t=(s=await R)==null?void 0:s.find({_id:{$in:Object.keys(e).filter(r=>r.length===24).map(r=>S.createFromHexString(r))}});if(!t)return Object.create(null);let n=await t.toArray();return Object.fromEntries(n.map(({_id:r,username:a})=>[a,e[r.toHexString()]]).filter(r=>r[1]))}async function ie(e){var r;let t=Object.create(null);for(let a in e)t[a.toLowerCase()]=e[a];let n=(r=await R)==null?void 0:r.find({username:{$in:Object.keys(t).map(a=>new RegExp(`^${a}$`,"i"))}});if(!n)return{};let s=await n.toArray();return Object.fromEntries(s.map(({_id:a,username:i})=>[a.toHexString(),t[i.toLowerCase()]]).filter(a=>a[1]))}async function oe(e,t){if(e.length!==24)return!1;for(let i in t)if(i.length!==24)return!1;let[n,s]=await Promise.all([R,x]);if(!n||!s)return!1;let r=S.createFromHexString(e),a;return{acknowledged:a}=await n.updateMany({},{$pull:{chats:r}}),!a||({acknowledged:a}=await n.updateMany({_id:{$in:Object.keys(t).filter(i=>i.length===24).filter(i=>t[i]!=="none").map(i=>S.createFromHexString(i))}},{$push:{chats:r}}),!a)?!1:({acknowledged:a}=await s.updateOne({_id:r},{$set:{members:t}}),a)}async function ce(e,t){if(e.length!==24||t.length!==24)return;let n=await x;if(!n)return;let{members:s}=await n.findOne({_id:S.createFromHexString(e)})||{};s&&(delete s[t],await n.updateOne({_id:S.createFromHexString(e)},{$set:{members:s}}))}async function ue(e,t,n,s){if(t.length!==24)return;let r=await x;if(!r)return;let{messages:a}=await r.findOne({_id:S.createFromHexString(t)})||{};if(!a)return;let i=a.find(({id:d})=>d===n);if(!i||i.from!==e)return;i.content=s;let{acknowledged:o}=await r.updateOne({_id:S.createFromHexString(t)},{$set:{messages:a}});if(o)return i}import{ObjectId as D}from"bson";var De=y("accounts"),A=y("notes");async function Ne(e,t){let n=await De;n&&await n.updateOne({_id:t},{$push:{notes:e}})}async function q(e){let{status:t,account:n}=await P(e);if(t===0)return[];if(t===1)return[];let s=await A;return s?(await s.find({_id:{$in:n.notes}}).toArray()).map(({_id:a,title:i,contents:o})=>({id:a.toHexString(),title:i,desc:o.slice(0,80).replaceAll(`
`," ")})):[]}async function me(e,t){let{status:n,account:s}=await P(e);if(n===0||n===1)return;let r=await A;if(!r||s.notes.length>=100)return;let a={_id:new D,contents:"<p>This is your new note!</p>",creation:Date.now(),owner:s._id,title:t};await Promise.all([r.insertOne(a),Ne(a._id,s._id)])}async function M(e,t){if(t.length!==24)return{doesOwn:!1};let{status:n,account:s}=await P(e);if(n===0)return{doesOwn:!1};if(n===1)return{doesOwn:!1};let r=await A;if(!r)return{doesOwn:!1};let a=await r.findOne({_id:D.createFromHexString(t),owner:s._id});return a?{doesOwn:!0,note:a}:{doesOwn:!1}}async function le(e,t){if(e.length!==24||t.length>1e4)return;let n=await A;n&&await n.updateOne({_id:D.createFromHexString(e)},{$set:{contents:t}})}async function de(e,t){if(e.length!==24)return;let n=await A;n&&await n.updateOne({_id:D.createFromHexString(e)},{$set:{title:t.slice(0,100)}})}import{ObjectId as w}from"mongodb";import{randomUUID as B}from"node:crypto";var N=y("accounts"),v=y("stories");async function k(e,t){let[n,s]=await Promise.all([v,h(e)]);if(!n||!s||t.length!==24)return{permission:"none"};let r=s._id.toHexString(),a=await n.findOne({_id:w.createFromHexString(t)});if(!a)return{permission:"none"};let i=a.members[r];if(!i||i==="none")return{permission:"none"};let o=a.gems[r]||0;return{permission:i,gems:o,title:a.title,members:a.members,threads:a.threads,completed:a.completed,userGems:a.gems}}async function E(e){let[t,n]=await Promise.all([v,h(e)]);if(!t||!n)return[];let s=n._id.toHexString();return(await t.find({_id:{$in:n.stories}}).toArray()).map(a=>({id:a._id.toHexString(),title:a.title,activeThreadCount:a.threads.length,completedThreadCount:a.completed.length,level:a.members[s]})).filter(a=>a.level&&a.level!=="none")}async function fe(e,t){let[n,s,r]=await Promise.all([v,N,h(e)]);if(!n||!s||!r)return!1;let a=r._id.toHexString();if((await n.find({members:{[a]:"manage"}}).toArray()).length>=100)return!1;let o=new w,{acknowledged:d}=await n.insertOne({completed:[],creation:Date.now(),members:{[a]:"manage"},gems:{[a]:10},threads:[],title:t,_id:o});return!(!d||!await C(e,{$push:{stories:o}}))}async function he(e,t){if(t.length!==24)return!1;let[n,s]=await Promise.all([v,h(e)]);if(!n||!s)return!1;let r=s._id.toHexString(),a=await n.findOne({_id:w.createFromHexString(t)});if(!a)return!1;let i=a.members[r];return i===void 0||i=="none"?!1:{id:t,activeThreadCount:a.threads.length,completedThreadCount:a.completed.length,completableThreadCount:a.threads.filter(o=>o.sentences.length>=20).length,gems:a.gems[r]||0,title:a.title,level:i}}async function ge(e,t,n){if(n.length<20||n.length>=1e3||t.length!==24)return!1;let[s,r]=await Promise.all([v,h(e)]);if(!r||!s)return!1;let a=w.createFromHexString(t),i=r._id.toHexString(),o=await s.findOne({_id:a});if(!o)return!1;let d=o.members[i],m=o.gems[i];if(d!="manage"&&d!="write"||m===void 0||m<10)return!1;let{acknowledged:f}=await s.updateOne({_id:a},{$push:{threads:{id:B(),creation:Date.now(),sentences:[{id:B(),from:i,content:n,username:r.username,creation:Date.now()}]}},$set:{[`gems.${i}`]:m-10}});return f?{level:d,id:t,activeThreadCount:o.threads.length+1,completableThreadCount:o.threads.filter(u=>u.sentences.length>=20).length,completedThreadCount:o.completed.length,gems:m-10,title:o.title}:!1}async function pe(e,t,n){if(t.length!==24)return{type:"ignore"};let[s,r]=await Promise.all([v,h(e)]);if(!s||!r)return{type:"ignore"};let a=r._id.toHexString(),i=await s.findOne({_id:w.createFromHexString(t)});if(!i)return{type:"ignore"};let o=i.members[a];if(o===void 0||o=="none")return{type:"ignore"};let d=Math.min(Math.ceil(Object.keys(i.members).length/2),5),m=i.threads.map(l=>{let g=1/0;for(let p=l.sentences.length-1;p>=0;p--)if(l.sentences[p].from==a){g=l.sentences.length-p;break}return{thread:l,distance:g}});if(m.length==0)return{type:"need-more-threads"};let f=m.filter(({distance:l})=>l>=d);if(f.length==0)return{type:"not-long-enough",minimumDistance:d,distanceLeft:d-Math.max(...m.map(l=>l.distance))};if(n&&(f=f.filter(l=>l.thread.sentences.length>=20),f.length<=1))return{type:"need-more-completed"};let u=f[Math.floor(f.length*Math.random())].thread;return{type:"ok",sentence:u.sentences[u.sentences.length-1]}}async function we(e,t,n,s,r){if(t.length!==24)return 0;let[a,i]=await Promise.all([v,h(e)]);if(!a||!i)return 0;let o=i._id.toHexString(),d=w.createFromHexString(t),m=await a.findOne({_id:d});if(!m)return 0;let f=m.members[o];if(f===void 0||f=="none")return 0;let u=T=>T.id==n,l=m.threads.findIndex(T=>T.sentences.find(u));if(l==-1)return 0;let g=m.threads[l];if(!g)return 0;if(g.sentences[g.sentences.length-1].id!=n)return 1;let z={id:B(),from:o,username:i.username,content:s,creation:Date.now()},H;if(r){let T=m.gems[o];if(T===void 0||T<10||m.threads.length<=1)return 0;g.sentences.push(z),{acknowledged:H}=await a.updateOne({_id:d},{$pull:{threads:{id:g.id}},$push:{completed:g},$set:{[`gems.${o}`]:(m.gems[o]||0)-10}})}else({acknowledged:H}=await a.updateOne({_id:d},{$push:{[`threads.${l}.sentences`]:z},$set:{[`gems.${o}`]:(m.gems[o]||0)+1}}));return H?{type:2,gems:(m.gems[o]||0)+1}:0}async function ye(e,t,n){if(!n||t.length!==24)return!1;let[s,r]=await Promise.all([v,h(e)]);if(!r||!s)return!1;let a=w.createFromHexString(t),i=r._id.toHexString(),o=await s.findOne({_id:a});if(!o||o.members[i]!="manage")return!1;let{acknowledged:m}=await s.updateOne({_id:a},{$set:{title:n.slice(0,100)}});return m}async function I(e){var s;let t=(s=await N)==null?void 0:s.find({_id:{$in:Object.keys(e).filter(r=>r.length===24).map(r=>w.createFromHexString(r))}});if(!t)return Object.create(null);let n=await t.toArray();return Object.fromEntries(n.map(({_id:r,username:a})=>[a,e[r.toHexString()]]).filter(r=>r[1]))}async function Se(e){var r;let t=Object.create(null);for(let a in e)t[a.toLowerCase()]=e[a];let n=(r=await N)==null?void 0:r.find({username:{$in:Object.keys(t).map(a=>new RegExp(`^${a}$`,"i"))}});if(!n)return{};let s=await n.toArray();return Object.fromEntries(s.map(({_id:a,username:i})=>[a.toHexString(),t[i.toLowerCase()]]).filter(a=>a[1]&&a[1]!="none"))}async function ve(e,t,n){if(e.length!=24)return;let[s,r]=await Promise.all([v,N]);if(!s||!r)return;for(let o in t)n[o]===void 0&&(n[o]=10);let a,i=w.createFromHexString(e);return{acknowledged:a}=await r.updateMany({},{$pull:{stories:i}}),!a||({acknowledged:a}=await r.updateMany({_id:{$in:Object.keys(t).filter(o=>o.length===24).filter(o=>t[o]!=="none").map(o=>w.createFromHexString(o))}},{$push:{stories:i}}),!a)?!1:({acknowledged:a}=await s.updateOne({_id:w.createFromHexString(e)},{$set:{members:t,gems:n}}),a)}async function be(e,t){if(e.length!==24||t.length!==24)return;let n=await v;if(!n)return;let{members:s}=await n.findOne({_id:w.createFromHexString(e)})||{};s&&(delete s[t],await n.updateOne({_id:w.createFromHexString(e)},{$set:{members:s}}))}async function xe(e,t,n,s){let r=await k(e,t);if(r.permission=="none")return;let a=Date.now()-{day:24*60*60*1e3,week:7*24*60*60*1e3,all:Date.now()}[n],i=Object.create(null),o=Object.create(null),d,m=0;if(s=="contributions"){let f=r.threads.concat(r.completed).flatMap(u=>u.sentences).filter(u=>u.creation>=a);for(let{username:u,creation:l}of f)u in i?i[u]++:i[u]=1,u in o?o[u]=Math.max(o[u],l):o[u]=l;m=f.length}else if(s=="threads"){let f=r.threads.map(u=>({...u,completed:!1})).concat(r.completed.map(u=>({...u,completed:!0}))).filter(u=>u.creation>=a);d=[];for(let{creation:u,sentences:l,completed:g}of f){let p=l[0].username;p in i?i[p]++:i[p]=1,p in o?o[p]=Math.max(o[p],u):o[p]=u,g||d.push(l.length)}m=f.length,d.sort((u,l)=>l-u)}return{period:n,total:m,type:s,messageCounts:d,contributions:Object.entries(i).sort(([f,u],[l,g])=>g-u),last:Object.entries(o).sort(([f,u],[l,g])=>g-u)}}async function c(e,t){let{status:n,account:s}=await P(t);if(n===2){let r=s.creation+9e5;return(s.verified||!s.verified&&r>Date.now())&&(e.emit("account:update:session",s.session),e.emit("account:update:username",s.username)),s.verified?e.emit("account:needs-verification",!1):e.emit("account:needs-verification",r-Date.now()),e.data.oldSession&&e.leave(`session:${e.data.oldSession}`),e.join(`session:${e.data.oldSession=t}`),s}else return e.emit("account:update:session",""),e.emit("account:update:username",""),e.emit("account:needs-verification",!1),e.data.oldSession&&e.leave(`session:${e.data.oldSession}`),!1}var Oe="Your username should only contain letters, numbers, and underscores, and should be 6 to 20 characters long.",Te="Your password should contain a letter and number and be at least 8 characters long.",Z={"account:check-session"(e){c(this,e)},async"account:create"(e,t,n){let{status:s,account:r}=await Q(e,t,n);s===2?(await c(this,r.session),this.emit("account:done:verify")):this.emit("error",{5:"Your email address is invalid. Make sure it is formatted properly and can receive emails.",4:Te,3:Oe,8:`${n} is already registered with another account.`,1:"An unknown issue occurred. Try again later.",0:"This instance of zSnout can't log in users.",7:`@${e} is already registered with another account.`}[s])},async"account:login"(e,t){let{status:n,account:s}=await K(e,t);n===3?(await c(this,s.session),this.emit("account:done:verify")):this.emit("error",{0:"Your username or password is incorrect.",1:"This instance of zSnout can't log in users.",2:"Your username or password is incorrect."}[n])},async"account:reset-session"(e,t){let n=Le();await O(e,{session:n});let s=this.to(`session:${e}`);s.emit("account:update:session",""),s.emit("account:update:username",""),t&&this.emit("account:update:session",this.data.oldSession=n),this.emit("account:done:reset-session")},async"account:update:username"(e,t){if(await c(this,e)){let n=await X(e,t);n===2?(this.to(`session:${e}`).emit("account:update:username",t),this.emit("account:update:username",t),this.emit("account:done:update:username")):this.emit("error",{3:Oe,7:`@${t} is already registered with another account.`,0:"This server cannot change usernames.",1:"An unknown error occurred."}[n])}},async"account:update:password"(e,t,n){if(await c(this,e)){let s=await ee(e,t,n);s===2?this.emit("account:done:update:password"):this.emit("error",{4:Te,6:"Your old password was incorrect.",0:"This server cannot change usernames.",1:"An unknown error occurred."}[s])}},async"account:verify"(e){let{status:t,account:n}=await V(e);t===2?(await c(this,n.session),this.emit("account:done:verify")):this.emit("error",{0:"The provided verification code is invalid.",1:"This instance of zSnout can't verify accounts."}[t])},async"blog:request:will-notify"(e){var t;await c(this,e)&&this.emit("blog:update:will-notify",((t=await h(e))==null?void 0:t.willNotifyForBlog)||!1)},async"blog:update:will-notify"(e,t){await c(this,e)&&(await O(e,{willNotifyForBlog:t}),this.emit("blog:update:will-notify",t),this.to(`session-${e}`).emit("blog:update:will-notify",t),this.emit("blog:done:update:will-notify"))},async"bookmarks:request"(e){var t;if(await c(this,e)){let n=(t=await h(e))==null?void 0:t.bookmarks;n&&this.emit("bookmarks:list",n)}},async"bookmarks:update"(e,t){await c(this,e)&&await O(e,{bookmarks:t})&&t&&this.to(`session:${e}`).emit("bookmarks:list",t)},async"chat:create"(e,t){await c(this,e)&&await ne(e,t)&&this.emit("chat:index",await F(e))},async"chat:leave"(e,t){if(t.length!==24)return;let n=await c(this,e);n&&await C(e,{$pull:{chats:He.createFromHexString(t)}})&&await ce(t,n._id.toHexString())},async"chat:message:delete"(e,t,n){if(t.length!==24)return;let s=await c(this,e);s&&await re(s.username,t,n)&&(this.to(`chat-${t}`).emit("chat:message:delete",t,n),this.emit("chat:message:delete",t,n))},async"chat:message:send"(e,t,n){if(!n)return;let s=await c(this,e);if(!s)return;let{permission:r}=await $(e,t);if(r==="manage"||r==="comment"){let a=await ae(t,s.username,n);if(!a)return;this.to(`chat-${t}`).emit("chat:message:update",t,a),this.emit("chat:message:update",t,a)}},async"chat:message:update"(e,t,n,s){if(t.length!==24)return;let r=await c(this,e);if(!r)return;let a=await ue(r.username,t,n,s);a&&this.to(`chat-${t}`).emit("chat:message:update",t,a)},async"chat:request:index"(e){await c(this,e)&&this.emit("chat:index",await F(e))},async"chat:request:members"(e,t){if(await c(this,e)){let{members:n,permission:s}=await $(e,t);if(this.emit("chat:permission",t,s),s!=="manage")return;this.emit("chat:update:members",t,await j(n))}},async"chat:update:members"(e,t,n){let s=await c(this,e);if(!s)return;let{permission:r}=await $(e,t);if(this.emit("chat:permission",t,r),r!=="manage"||n[s.username]!=="manage")return;let a=await ie(n);a[s._id.toHexString()]==="manage"&&(this.emit("chat:update:members",t,await j(a)),await oe(t,a))},async"chat:update:title"(e,t,n){if(this.rooms.has(`chat-${t}`)||await c(this,e)){let{permission:s}=await $(e,t);s==="manage"&&await se(t,n)&&this.to(`chat-${t}`).emit("chat:update:title",t,n)}},async"chat:watch:start"(e,t){if(await c(this,e)){let{title:n,messages:s,permission:r}=await $(e,t);if(this.emit("chat:permission",t,r),r==="none")return;this.join(`chat-${t}`),this.emit("chat:message:list",t,s),this.emit("chat:update:title",t,n)}},async"chat:watch:stop"(e){this.leave(`chat-${e}`)},async"notes:create"(e,t){await c(this,e)?(await me(e,t),this.emit("notes:index",await q(e))):this.emit("notes:index",[])},async"notes:request:details"(e,t){if(await c(this,e)){let{doesOwn:n,note:s}=await M(e,t);n&&this.emit("notes:details",{id:t,title:s.title})}},async"notes:request:index"(e){await c(this,e)?this.emit("notes:index",await q(e)):this.emit("notes:index",[])},async"notes:request:note"(e,t){if(await c(this,e)){let{doesOwn:n,note:s}=await M(e,t);n?this.emit("notes:note",t,s.contents):this.emit("notes:note",t,!1)}},async"notes:update:note"(e,t,n){if(await c(this,e)){let{doesOwn:s}=await M(e,t);s&&(le(t,n),this.to(`session:${e}`).emit("notes:note",t,n))}},async"notes:update:title"(e,t,n){if(await c(this,e)){let{doesOwn:s}=await M(e,t);s&&(await de(t,n),this.to(`session:${e}`).emit("notes:details",{id:t,title:n}))}},async"story:create"(e,t){await c(this,e)&&await fe(e,t)&&this.emit("story:index",await E(e))},async"story:create:thread"(e,t,n){if(await c(this,e)){let s=await ge(e,t,n);s&&(this.emit("story:details",s),this.emit("story:update:permission",t,s.level),this.emit("story:update:gems",t,s.gems))}},async"story:leave"(e,t){let n=await c(this,e);n&&await be(t,n._id.toHexString())},async"story:request:completed"(e,t){if(await c(this,e)){let n=await k(e,t),s=r=>r.content;n&&n.permission!=="none"?(this.emit("story:completed",t,n.completed.map(r=>({first:r.sentences[0].content,content:r.sentences.map(s).join(" ")}))),this.emit("story:update:permission",t,n.permission),this.emit("story:update:gems",t,n.gems)):this.emit("story:update:permission",t,"none")}},async"story:request:details"(e,t){if(await c(this,e)){let n=await he(e,t);n?(this.emit("story:details",n),this.emit("story:update:permission",t,n.level),this.emit("story:update:gems",t,n.gems)):this.emit("story:update:permission",t,"none")}},async"story:request:index"(e){await c(this,e)&&this.emit("story:index",await E(e))},async"story:request:members"(e,t){if(await c(this,e)){let{members:n,permission:s}=await k(e,t);if(s!=="manage")return;this.emit("story:update:members",t,await I(n))}},async"story:request:stats"(e,t,n,s){if(await c(this,e)){let r=await xe(e,t,n,s);r&&this.emit("story:stats",t,r)}},async"story:request:thread"(e,t,n){if(!await c(this,e))return;let s=await pe(e,t,n);switch(s.type){case"ignore":return;case"need-more-threads":this.emit("story:fail",t),this.emit("error","There aren't any threads that you can post to.");return;case"need-more-completed":this.emit("story:fail",t),this.emit("error","Two threads need to have at least 20 sentences before either can be completed.");return;case"not-long-enough":this.emit("story:fail",t),this.emit("error",`At least ${s.minimumDistance} sentence${s.minimumDistance==1?"":"s"} need to be written before you can contribute again; ask ${s.distanceLeft} more user${s.distanceLeft==1?"":"s"} to max out their contributions.`);return;case"ok":this.emit("story:thread",t,s.sentence)}},async"story:update:members"(e,t,n){let s=await c(this,e);if(!s)return;let{permission:r,userGems:a}=await k(e,t);if(this.emit("story:update:permission",t,r),r!=="manage"||n[s.username]!=="manage")return;let i=await Se(n);i[s._id.toHexString()]==="manage"&&(this.emit("story:update:members",t,await I(i)),await ve(t,i,{...a}))},async"story:update:thread"(e,t,n,s,r){if(await c(this,e)){let a=await we(e,t,n,s,r);if(a===0)return;if(a===1){this.emit("story:fail",t),this.emit("error","Somebody updated this thread before you! You can always press 'Add to a Thread' again.");return}this.emit("story:done:update:thread",t),this.emit("story:update:gems",t,a.gems)}},async"story:update:title"(e,t,n){await c(this,e)&&await ye(e,t,n)},async"youtube:request"(e){try{let t=await je.getInfo(`https://youtube.com/watch?v=${e}`),n=t.videoDetails,s=t.formats;n.thumbnails.sort((a,i)=>i.height-a.height);let{url:r}=n.thumbnails.sort((a,i)=>i.width-a.width)[0];this.emit("youtube:results",e,{title:n.title,description:n.description,isLive:n.isLiveContent,channel:n.ownerChannelName,thumbnail:r,formats:s.map(({url:a,hasAudio:i,hasVideo:o,qualityLabel:d,audioQuality:m})=>({url:a,hasAudio:i,hasVideo:o,quality:d,audio:m}))})}catch{}}};Object.setPrototypeOf(Z,null);function qe(e){new Fe(e).on("connection",n=>{for(let s in Z)n.on(s,Z[s].bind(n))})}function $t(){let e=new Re;qe(e);let t=+(process.env.PORT||3e3);e.listen(Number.isSafeInteger(t)?t:3e3)}export{qe as makeIO,$t as start};
